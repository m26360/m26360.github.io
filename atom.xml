<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mana的博客</title>
  
  
  <link href="https://m26360.com/atom.xml" rel="self"/>
  
  <link href="https://m26360.com/"/>
  <updated>2021-08-22T14:17:43.813Z</updated>
  <id>https://m26360.com/</id>
  
  <author>
    <name>mana</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习进度</title>
    <link href="https://m26360.com/2021/08/22/%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/"/>
    <id>https://m26360.com/2021/08/22/%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/</id>
    <published>2021-08-22T13:22:49.000Z</published>
    <updated>2021-08-22T14:17:43.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h3><h4 id="8月"><a href="#8月" class="headerlink" title="8月"></a>8月</h4><p>1.将hexo博客进行了双线部署。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;2021&quot;&gt;&lt;a href=&quot;#2021&quot; class=&quot;headerlink&quot; title=&quot;2021&quot;&gt;&lt;/a&gt;2021&lt;/h3&gt;&lt;h4 id=&quot;8月&quot;&gt;&lt;a href=&quot;#8月&quot; class=&quot;headerlink&quot; title=&quot;8月&quot;&gt;&lt;/a&gt;8月&lt;/h</summary>
      
    
    
    
    <category term="学习进度" scheme="https://m26360.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>关于昨天尝试双线部署hexo</title>
    <link href="https://m26360.com/2021/08/17/%E5%85%B3%E4%BA%8E%E6%98%A8%E5%A4%A9%E5%B0%9D%E8%AF%95%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2hexo/"/>
    <id>https://m26360.com/2021/08/17/%E5%85%B3%E4%BA%8E%E6%98%A8%E5%A4%A9%E5%B0%9D%E8%AF%95%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2hexo/</id>
    <published>2021-08-17T01:00:51.000Z</published>
    <updated>2021-08-17T09:43:15.724Z</updated>
    
    <content type="html"><![CDATA[<p>因为此博客是部署在Github上的，所以国内访问会比较慢，甚至无法访问，正好看到了将hexo双线部署在Github和Coding上，顺便也能让百度收录此博客，于是就尝试了一下，coding账号注册，新建项目，新建仓库，修改博客config文件，修改DNS解析，配置密匙，将Github解析改为境外访问等等…一气呵成，最后发现博客无法打开，因为网上的教程都是腾讯云开发平台的教程，好像是coding被腾讯收购了，而我用的又是coding，难免会有些设置不存在或者找不到，导致最终失败了，昨天也是弄了几个小时，头晕眼花，等过一段时间我再重新试一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为此博客是部署在Github上的，所以国内访问会比较慢，甚至无法访问，正好看到了将hexo双线部署在Github和Coding上，顺便也能让百度收录此博客，于是就尝试了一下，coding账号注册，新建项目，新建仓库，修改博客config文件，修改DNS解析，配置密匙，将G</summary>
      
    
    
    
    <category term="记录心情" scheme="https://m26360.com/categories/%E8%AE%B0%E5%BD%95%E5%BF%83%E6%83%85/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo 双线部署到Coding和GitHub</title>
    <link href="https://m26360.com/2021/08/16/hexo-%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2%E5%88%B0Coding%E5%92%8CGitHub/"/>
    <id>https://m26360.com/2021/08/16/hexo-%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2%E5%88%B0Coding%E5%92%8CGitHub/</id>
    <published>2021-08-16T08:50:56.000Z</published>
    <updated>2021-08-22T13:22:11.646Z</updated>
    
    <content type="html"><![CDATA[<p>因为教程步骤繁琐，具体请参考:<a href="https://cloud.tencent.com/developer/article/1834005">https://cloud.tencent.com/developer/article/1834005</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为教程步骤繁琐，具体请参考:&lt;a href=&quot;https://cloud.tencent.com/developer/article/1834005&quot;&gt;https://cloud.tencent.com/developer/article/1834005&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解决hexo部署之后需要重新修改域名的问题</title>
    <link href="https://m26360.com/2021/08/16/%E8%A7%A3%E5%86%B3hexo%E9%83%A8%E7%BD%B2%E4%B9%8B%E5%90%8E%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E4%BF%AE%E6%94%B9%E5%9F%9F%E5%90%8D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://m26360.com/2021/08/16/%E8%A7%A3%E5%86%B3hexo%E9%83%A8%E7%BD%B2%E4%B9%8B%E5%90%8E%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E4%BF%AE%E6%94%B9%E5%9F%9F%E5%90%8D%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-08-16T06:14:29.000Z</published>
    <updated>2021-08-16T06:21:56.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="教程开始"><a href="#教程开始" class="headerlink" title="教程开始"></a>教程开始</h3><p>1.打开博客的source目录，创建CNAME文件，在CNAME中写上自己的域名。<br>2.在hexo博客目录下，右键选择Git Bash Here,输入以下代码并回车：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>3.over!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;教程开始&quot;&gt;&lt;a href=&quot;#教程开始&quot; class=&quot;headerlink&quot; title=&quot;教程开始&quot;&gt;&lt;/a&gt;教程开始&lt;/h3&gt;&lt;p&gt;1.打开博客的source目录，创建CNAME文件，在CNAME中写上自己的域名。&lt;br&gt;2.在hexo博客目录下，右键选择</summary>
      
    
    
    
    <category term="hexo博客操作相关" scheme="https://m26360.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构之稀疏数组</title>
    <link href="https://m26360.com/2021/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://m26360.com/2021/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-08-16T04:37:42.000Z</published>
    <updated>2021-08-17T09:43:42.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>当一个数组中大部分元素为0，或者为同一个值，可以使用稀疏数组来保存该数组。</p><h4 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h4><p>1.记录数组一共有几行几列，有多少个不同的值。<br>2.把具有不同的元素的行列及值记录在一个小规模数组中（稀疏数组），从而缩小程序规模。</p><span id="more"></span><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p>原始二维数组</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">0  0  0  1  0              </span><br><span class="line">0  1  0  0  2</span><br><span class="line">0  0  3  0  0         </span><br><span class="line">0  0  3  0  0</span><br><span class="line">2  0  5  0  0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>转换为：<br>        稀疏数组</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">     行  列   值</span><br><span class="line">    row  col  val</span><br><span class="line">[0]  4    5    6 总（原始二维数组有几行几列，几个不同值） </span><br><span class="line">[1]  0    3    1</span><br><span class="line">[2]  1    1    1</span><br><span class="line">[3]  1    4    2</span><br><span class="line">[4]  2    2    3</span><br><span class="line">[5]  3    0    2</span><br><span class="line">[6]  3    2    5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>行数不确定，列数始终为3</p><h4 id="二维数组转稀疏数组思路"><a href="#二维数组转稀疏数组思路" class="headerlink" title="二维数组转稀疏数组思路"></a>二维数组转稀疏数组思路</h4><p>1.遍历原始二维数组，得到有效数据个数(sum)。<br>2.根据sum的值创建稀疏数组int[][] sparseArr=new int[sum+1][3];<br>3.将二维数组有效数据存入到稀疏数组中。（[0]行为总数）</p><h4 id="稀疏数组转二维数组思路"><a href="#稀疏数组转二维数组思路" class="headerlink" title="稀疏数组转二维数组思路"></a>稀疏数组转二维数组思路</h4><p>1.先读取稀疏数组第一行，根据第一行数据，创建原始二维数组(chessArr2)。<br>2.再读取稀疏数组后几行的数据，并赋值给原始的二维数组(chessArr2)。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package com.sparsearray;</span><br><span class="line"></span><br><span class="line">public class SparseArray &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //创建原始二维数组11*11（棋盘大小）</span><br><span class="line">        //0表示没有棋子，1表示黑子，2表示蓝子</span><br><span class="line">        int[][] chessArr1 = new int[11][11];</span><br><span class="line">        chessArr1[1][2] = 1;</span><br><span class="line">        chessArr1[2][3] = 2;</span><br><span class="line"></span><br><span class="line">        //输出原始二维数组</span><br><span class="line">        System.out.println(<span class="string">&quot;原始数组为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (int[] row : chessArr1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int data : row) &#123;</span><br><span class="line">                System.out.print(data + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //将二维数组转成稀疏数组</span><br><span class="line">        //遍历二维数组，得到非0元素的个数</span><br><span class="line">        int sum = 0;</span><br><span class="line">        <span class="keyword">for</span> (int[] row : chessArr1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int data : row) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data != 0) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //定义一个稀疏数组</span><br><span class="line">        int[][] sparseArr = new int[sum + 1][3];</span><br><span class="line">        sparseArr[0][0] = 11;</span><br><span class="line">        sparseArr[0][1] = 11;</span><br><span class="line">        sparseArr[0][2] = sum;</span><br><span class="line"></span><br><span class="line">        //普通<span class="keyword">for</span>循环遍历二维数组，得到下标，用于储存到稀疏数组中</span><br><span class="line">        int count = 0;    //用于记录第几个非0数据以及对应的稀疏数组的行索引</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; chessArr1.length; i++)</span><br><span class="line">            <span class="keyword">for</span> (int j = 0; j &lt; chessArr1.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j] != 0) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArr[count][0] = i;</span><br><span class="line">                    sparseArr[count][1] = j;</span><br><span class="line">                    sparseArr[count][2] = chessArr1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        //遍历输出稀疏数组</span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (int[] row : sparseArr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int data : row) &#123;</span><br><span class="line">                System.out.print(data + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //稀疏数组还原为二维数组</span><br><span class="line">        //读取稀疏数组第一行，创建二维数组</span><br><span class="line">        int [][]chessArr2=new int[sparseArr[0][0]][sparseArr[0][1]];</span><br><span class="line"></span><br><span class="line">        //读取稀疏数组的后几行（第二行开始），并赋值给二维数组</span><br><span class="line">        <span class="keyword">for</span> (int i=1;i&lt;sparseArr.length;i++) &#123;</span><br><span class="line">            chessArr2[sparseArr[i][0]][sparseArr[i][1]]=sparseArr[i][2];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //输出chessArr2数组</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复后chessArr数组为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (int[] row : chessArr2) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int data : row) &#123;</span><br><span class="line">                System.out.print(data + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="#dd0000">（注：二维数组增强for循环遍历第一次得到的是类型为int[]的行，类型为int[]的行再次增强for循环得到二维数组的每一个值。）</font><br /></p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>以上内容为博主自己总结，用于日后复习与巩固，如果转载请注明来源，谢谢。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;稀疏数组&quot;&gt;&lt;a href=&quot;#稀疏数组&quot; class=&quot;headerlink&quot; title=&quot;稀疏数组&quot;&gt;&lt;/a&gt;稀疏数组&lt;/h3&gt;&lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;p&gt;当一个数组中大部分元素为0，或者为同一个值，可以使用稀疏数组来保存该数组。&lt;/p&gt;
&lt;h4 id=&quot;处理方法&quot;&gt;&lt;a href=&quot;#处理方法&quot; class=&quot;headerlink&quot; title=&quot;处理方法&quot;&gt;&lt;/a&gt;处理方法&lt;/h4&gt;&lt;p&gt;1.记录数组一共有几行几列，有多少个不同的值。&lt;br&gt;2.把具有不同的元素的行列及值记录在一个小规模数组中（稀疏数组），从而缩小程序规模。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://m26360.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://m26360.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>hexo如何新建文章</title>
    <link href="https://m26360.com/2021/08/15/hexo%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/"/>
    <id>https://m26360.com/2021/08/15/hexo%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/</id>
    <published>2021-08-15T03:55:43.000Z</published>
    <updated>2021-08-17T09:44:36.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-新建文章"><a href="#1-新建文章" class="headerlink" title="1.新建文章"></a>1.新建文章</h3><h4 id="（1）输入命令"><a href="#（1）输入命令" class="headerlink" title="（1）输入命令"></a>（1）输入命令</h4><p>在hexo博客目录下，右键选择Git Bash Here,输入以下代码并回车：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章名字&quot;</span></span><br></pre></td></tr></table></figure><h4 id="（2）文章所在位置"><a href="#（2）文章所在位置" class="headerlink" title="（2）文章所在位置"></a>（2）文章所在位置</h4><p>在hexo博客目录下的/source/_posts/文件夹里，可以找到你新建的博客文件.md，直接打开编辑文章即可（使用Markdown语法）。传送门：<a href="https://www.appinn.com/markdown/">Markdown语法教程</a></p><h3 id="2-编辑文章"><a href="#2-编辑文章" class="headerlink" title="2.编辑文章"></a>2.编辑文章</h3><h4 id="（1）设置文章所属tags（标签）和categories（分类）"><a href="#（1）设置文章所属tags（标签）和categories（分类）" class="headerlink" title="（1）设置文章所属tags（标签）和categories（分类）"></a>（1）设置文章所属tags（标签）和categories（分类）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo如何新建文章</span><br><span class="line">date: 2021-08-15 11:55:43</span><br><span class="line">tags: （设置标签的地方）</span><br><span class="line">categories: （设置分类的地方）</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><font color="#dd0000">（注：设置属性的冒号后面要有一个空格，一定要注意！）</font><br /></p><h4 id="（2）设置阅读全文按钮"><a href="#（2）设置阅读全文按钮" class="headerlink" title="（2）设置阅读全文按钮"></a>（2）设置阅读全文按钮</h4><p>在文章中使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><p>之后的代码将不会被显示。</p><h3 id="3-将文章部署到Github"><a href="#3-将文章部署到Github" class="headerlink" title="3.将文章部署到Github"></a>3.将文章部署到Github</h3><p>（1）在Git中依次执行以下3行代码（3部曲）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>（每次执行3部曲的时候，都要进入Github仓库重新设置一下Page为你的域名，至于问什么会出现这种问题，我也不知道）</p><p>接下来访问自己的博客域名，就能看到新的文章了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-新建文章&quot;&gt;&lt;a href=&quot;#1-新建文章&quot; class=&quot;headerlink&quot; title=&quot;1.新建文章&quot;&gt;&lt;/a&gt;1.新建文章&lt;/h3&gt;&lt;h4 id=&quot;（1）输入命令&quot;&gt;&lt;a href=&quot;#（1）输入命令&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="hexo博客操作相关" scheme="https://m26360.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Git Bash的基本命令</title>
    <link href="https://m26360.com/2021/07/31/Git%20Bash%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>https://m26360.com/2021/07/31/Git%20Bash%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</id>
    <published>2021-07-31T09:09:10.000Z</published>
    <updated>2021-08-17T09:45:43.344Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第-1-个命令："><a href="#第-1-个命令：" class="headerlink" title="第 1 个命令："></a>第 1 个命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>在命令行窗口的光标处，输入git status命令，查看仓库的状态<br>注：在每个git操作之后，我们基本都会输入git status命令，查看仓库状态。这也从侧面说明了git status命令使用的频率之高，也建议大家在操作 Git 仓库的时候多使用git status命令，这能帮助我们实时了解仓库的状态，显然非常有用。</p><h3 id="第-2-个命令："><a href="#第-2-个命令：" class="headerlink" title="第 2 个命令："></a>第 2 个命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>在命令行窗口的光标处，输入git init命令，初始化 Git 仓库</p><h3 id="第-3-个命令："><a href="#第-3-个命令：" class="headerlink" title="第 3 个命令："></a>第 3 个命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure><p>在命令行窗口的光标处，输入git add hit.txt命令，将hit.txt文件添加到 Git 仓库<br>注：git add命令并没有把文件提交到 Git 仓库，而是把文件添加到了「临时缓冲区」，这个命令有效防止了我们错误提交的可能性。</p><span id="more"></span><h3 id="第-4-个命令："><a href="#第-4-个命令：" class="headerlink" title="第 4 个命令："></a>第 4 个命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><p>在命令行窗口的光标处，输入git commit -m “text commit”命令，将hit.txt文件提交到 Git 仓库<br>其中commit表示提交，-m表示提交信息，提交信息写在双引号””内。</p><h3 id="第-5-个命令："><a href="#第-5-个命令：" class="headerlink" title="第 5 个命令："></a>第 5 个命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>在命令行窗口的光标处，输入git log”命令，打印 Git 仓库提交日志<br>注：提交记录的内容包括Author提交作者、Date提交日期和提交信息。</p><h3 id="第-6-个命令："><a href="#第-6-个命令：" class="headerlink" title="第 6 个命令："></a>第 6 个命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>在命令行窗口的光标处，输入git branch命令，查看 Git 仓库的分支情况<br>注：*号表示“当前所在的分支”，或者看后边蓝色小括号即为当前所在分支。</p><h3 id="第-7-个命令："><a href="#第-7-个命令：" class="headerlink" title="第 7 个命令："></a>第 7 个命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout</span><br></pre></td></tr></table></figure><p>在命令行窗口的光标处，输入git checkout a命令，切换到a分支</p><h3 id="第-8-个命令："><a href="#第-8-个命令：" class="headerlink" title="第 8 个命令："></a>第 8 个命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure><p>切换到master分支，然后输入git merge a命令，将a分支合并到master分支<br>注：在合并分支的时候，要考虑到两个分支是否有冲突，如果有冲突，则不能直接合并，需要先解决冲突；反之，则可以直接合并。</p><h3 id="第-9-个命令："><a href="#第-9-个命令：" class="headerlink" title="第 9 个命令："></a>第 9 个命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d &amp; git branch -D</span><br></pre></td></tr></table></figure><p>在命令行窗口的光标处，输入git branch -d a命令，删除a分支<br>注：有的时候，通过git branch -d命令可以出现删除不了现象，例如分支a的代码没有合并到主分支等，这时如果我们一定要删除该分支，那么我们可以通过命令git branch -D进行强制删除。</p><h3 id="第-10-个命令："><a href="#第-10-个命令：" class="headerlink" title="第 10 个命令："></a>第 10 个命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>在命令行窗口的光标处，输入git tag v1.0命令，为当前分支添加标签，通过命令git tag即可查看标签记录，通过命令git checkout v1.0即可切换到该标签下的代码状态</p><p><font color="#dd0000">（注：在我们进行任何的git操作之前，我们都得先切换到 Git 的仓库目录。换言之，我们得到先进入到（我们定义的）Git 仓库的最顶层文件目录下，然后从此目录中进入 Git Bash，这样之后的操作才能顺利进行。如果是 Linux 操作系统，则可以直接cd到仓库目录。）</font><br /></p><p>注：原作者：GitHubPorn<br>链接：<a href="https://zhuanlan.zhihu.com/p/369486197">https://zhuanlan.zhihu.com/p/369486197</a><br>（博主在此基础上进行精简，摘取，修改）</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第-1-个命令：&quot;&gt;&lt;a href=&quot;#第-1-个命令：&quot; class=&quot;headerlink&quot; title=&quot;第 1 个命令：&quot;&gt;&lt;/a&gt;第 1 个命令：&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git status&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在命令行窗口的光标处，输入git status命令，查看仓库的状态&lt;br&gt;注：在每个git操作之后，我们基本都会输入git status命令，查看仓库状态。这也从侧面说明了git status命令使用的频率之高，也建议大家在操作 Git 仓库的时候多使用git status命令，这能帮助我们实时了解仓库的状态，显然非常有用。&lt;/p&gt;
&lt;h3 id=&quot;第-2-个命令：&quot;&gt;&lt;a href=&quot;#第-2-个命令：&quot; class=&quot;headerlink&quot; title=&quot;第 2 个命令：&quot;&gt;&lt;/a&gt;第 2 个命令：&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在命令行窗口的光标处，输入git init命令，初始化 Git 仓库&lt;/p&gt;
&lt;h3 id=&quot;第-3-个命令：&quot;&gt;&lt;a href=&quot;#第-3-个命令：&quot; class=&quot;headerlink&quot; title=&quot;第 3 个命令：&quot;&gt;&lt;/a&gt;第 3 个命令：&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在命令行窗口的光标处，输入git add hit.txt命令，将hit.txt文件添加到 Git 仓库&lt;br&gt;注：git add命令并没有把文件提交到 Git 仓库，而是把文件添加到了「临时缓冲区」，这个命令有效防止了我们错误提交的可能性。&lt;/p&gt;</summary>
    
    
    
    <category term="Git使用相关" scheme="https://m26360.com/categories/Git%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>使用ubuntu，目录为中文的解决办法</title>
    <link href="https://m26360.com/2021/07/29/%E4%BD%BF%E7%94%A8ubuntu%EF%BC%8C%E7%9B%AE%E5%BD%95%E4%B8%BA%E4%B8%AD%E6%96%87%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://m26360.com/2021/07/29/%E4%BD%BF%E7%94%A8ubuntu%EF%BC%8C%E7%9B%AE%E5%BD%95%E4%B8%BA%E4%B8%AD%E6%96%87%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2021-07-29T09:09:10.000Z</published>
    <updated>2021-07-31T08:56:48.293Z</updated>
    
    <content type="html"><![CDATA[<p>终端输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_US</span><br></pre></td></tr></table></figure><p>并执行</p><p>终端输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure><p>并执行，</p><p>弹出窗口，选择不再提示，并确认</p><p>终端输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=zh_CN</span><br></pre></td></tr></table></figure><p>并执行</p><p>关闭终端并重启ubuntu</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;终端输入&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; LANG=en_</summary>
      
    
    
    
    <category term="杂项汇总" scheme="https://m26360.com/categories/%E6%9D%82%E9%A1%B9%E6%B1%87%E6%80%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>第一次拥有了属于自己的博客</title>
    <link href="https://m26360.com/2021/07/29/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8B%A5%E6%9C%89%E4%BA%86%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://m26360.com/2021/07/29/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8B%A5%E6%9C%89%E4%BA%86%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-07-29T08:23:22.000Z</published>
    <updated>2021-07-31T02:18:17.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>欢迎来到mana的小窝，这是我的第一个博客！很久以前就想建立一个自己的博客，当时因为各种原因未能实现（主要还是技术菜），昨天突然心血来潮，再次想要创建博客，于是在网络上看到一篇文章：用<a href="https://zhuanlan.zhihu.com/p/102592286">Github+hexo</a>创建博客，说到Github，很久以前注册过账号，但也仅仅是停留在注册这里,并没有真正用过，我想，以后应该会经常使用的。所以就照着答主的教程开始搭建，期间因为种种原因，遇到很多问题，各种百度查资料，最终还是完成了。过后我会在他的基础上完善修正一下搭建博客的教程。</p><h2 id="创建此博客的想法"><a href="#创建此博客的想法" class="headerlink" title="创建此博客的想法"></a>创建此博客的想法</h2><p>因为本人是软件工程专业的，写下此篇博客的时间为大一下的暑假。因为在此之前自学完了javase，html、css、javascript的基础语法，当时也没有将遇到的问题记录下来，也是有点小遗憾。所以博客仅用来分享记录我学习路上遇到的问题和心情等等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自我介绍&quot;&gt;&lt;a href=&quot;#自我介绍&quot; class=&quot;headerlink&quot; title=&quot;自我介绍&quot;&gt;&lt;/a&gt;自我介绍&lt;/h2&gt;&lt;p&gt;欢迎来到mana的小窝，这是我的第一个博客！很久以前就想建立一个自己的博客，当时因为各种原因未能实现（主要还是技术菜），昨天</summary>
      
    
    
    
    <category term="记录心情" scheme="https://m26360.com/categories/%E8%AE%B0%E5%BD%95%E5%BF%83%E6%83%85/"/>
    
    
  </entry>
  
</feed>
